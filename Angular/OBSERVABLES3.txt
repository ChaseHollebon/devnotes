Observables
-----------
What is an observable?
-- lazy stream
-- We can push things on the stream
-- We can listen for events in the stream
-- We can transform the stream to another stream


				You invoke a REST call ------------------------------------> We get a response   --------> transform the response to something else ------> 
                

				


 Characteristics of an observable
 --------------------------------
 1. Observables are lazy:  They only send messages to subscribers
    -- If you don't subscribe, nothing happens


			I have an observable to invoke a REST call



 2. Observables can have multiple values over time
	
				Use presses "A" in textbox --------------> User presses "D" ------------> user presses "M" -------------> We get that message


 3. Observables are cancelable
    -- We are waiting for a REST call / we can stop listening if we need
    -- We are listening on every key of a textbox / wecan stop listening



 4. Observables are producers of multiple items, "pushing" them to subscribers




 Invoking REST calls the manual way
 ----------------------------------
  1. We create an observable to that REST call

  2. We subscribe to that observable
     -- This INVOKES the rest call

  3. We do something when the REST call comes back



 Invoking REST calls the automatic way  (async pipe)
 ---------------------------------------------------
  1. We create an observable to that REST call

  2. We setup an async pipe in our HTML

  3. Use pipe/tap to see what happened






 Exercise 
 --------
  1. Create a simple page called sampleRestCalls

  2. Verify that page shows up

  3. Setup a very simple layout

			+----------------------------------------------------+
            | Sample REST Calls                             Help |
			+----------------------------------------------------+
            |                                                    |
            |                   <invoke REST call>               |
            |                                                    |
            |                                                    |
            +----------------------------------------------------+


 4. On the button, add a click handler that calls a method called  "invokeRestCall()"

 
 

 5. Create a new service called "MyUserService"

 6. Edit the new service
    a. Inject the httpClient

    b. Add this method:  

		public getLoggedInUserInfo(): Observable<UserInfoDTO>  {
			// Construct the URL to get basic information about the user
			const restUrl: string = environment.baseUrl + '/api/user/me';

			// Return an observable that will get user info
			return this.httpClient.get <UserInfoDTO>(restUrl)
		}



 7. Use your new service in your *MAIN PAGE*
    a. Inject the MyUserService

	b. Add a class variable 
			public userInfo       (the type is UserInfoDTO)

    b. Have your click handler **MANUALLY** invoke your REST call

			// Invoke the REST call
            this.myUserService.getLoggedInUserInfo().subscribe( () => {
					// The REST call came back with data
					
					console.log('we got a response');

			});




 
 8. Look at the data that was returned


 			// Invoke the REST call
            this.myUserService.getLoggedInUserInfo().subscribe( (aData: UserInfoDTO) => {
					// The REST call came back with data
					
					console.log('we got a response.  aData=', aData);

			});
