
								+-------------------+          +-------------------+
								|  Page 1           |          | Page 2            |
								|         count=5   |          |          count=0  |
								+-------------------+          +-------------------+
									 count                         count
	                         

												+-------------------+
												|  CountService     |
												|                   |
												|                   |
												|  addToCount()     | -------> REST call to add 1 to the count (in the backend)
												|                   |          What is passed-in?  Nothing
                                                |                   |          What is returned?   Nothing
                                                |                   |
												|  resetCount()     | -------> REST call to tell the backend to reset the count
												|                   |          What is passed-in?  Nothing
                                                |                   |          What is returned?   Nothing
                                                |                   | 
                                                |  getCount()       | -------> REST Call to get the count of records from the backend
												+-------------------+          What is passed-in?  Nothing
                                                                               What is returned?   number holding the current count in the backend




	
	How do we work with observables  (pages are using REST calls)....?
	------------------------------------------------------------------

	BEFORE:  Your count.service.ts

					public addToCount(): void {

					}


					public resetCount(): void {

					}


					public getCount(): number {

					}



	AFTER:   We're going to use Observables

					public addToCount(): Observable<string> {

					}


					public resetCount(): Observable<string> {

					}


					public getCount(): Observable<number> {

					}



	What is an observable?
	1. lazy
	2. used to listen for messages
	3. package of info that allows you to go from backend to frontend

	
				
	Adam Resnick's definition of an observable
	------------------------------------------
	1. It's a "lazy stream"
	2. It is an abstraction used for sending/listening for messages

		


	How do we invoke the REST call
      1) From typescript code:
			myObservable.subscribe()                                      invokes the REST call from typescript code

	  2) From the HTML
          <ng-container *ngIf="(myObservable | async)">               invokes the REST call from HTML
               <!-- REST call came back so now show the HTML -->
		  </ng-container>




				invoke a REST call
					------------------------------------------------------+
					|               <Data Packet>    |  map  |  delay     |         MyObservable.pipe(  delay(5000)  );
					------------------------------------------------------+
									------->    						 Listen for a response in the arrow function
													 					  -- Data Packet comes in (in the arrow function)




	 How do we run code when the data comes back
	 -- Use the arrow function:
				() => {  }


				myObservable.subscribe( (aData: ResponseDTO) => {
					// REST call came back some with data
					console.log('Data returned:  aData holds this ', aData);

				} )

														

	
						
			The unix pipe operator:  The output of one process --> the input of the 2nd process

									ls -l   # list all of the files in a directory
					
									ls -l | wc -l    # Shows the total number of files









  								+-------------------+          +-------------------+
								|  Page 1           |          | Page 2            |
								|         count=5   |          |          count=0  |
								+-------------------+          +-------------------+
									 count                         count
	                         

												+-------------------+
												|  CountService     |
												|                   |
												|                   |
												|  addToCount()     | -------> REST call to add 1 to the count (in the backend)
												|                   |          What is passed-in?  Nothing
                                                |                   |          What is returned?   Nothing
                                                |                   |
												|  resetCount()     | -------> REST call to tell the backend to reset the count
												|                   |          What is passed-in?  Nothing
                                                |                   |          What is returned?   Nothing
                                                |                   | 
                                                |  getCount()       | -------> REST Call to get the count of records from the backend
												+-------------------+          What is passed-in?  Nothing
                                                                               What is returned?   number holding the current count in the backend




  Plan for Changing this service into a Mock Service
  --------------------------------------------------
    1. Change the count.service.ts to use observables (SIMULATE a REST call)

					/* returns an observable */
					public addToCount(): Observable<string> {
						// 1. Create a local variable with some data to return
						let data: string = '';

						// 2. Convert that variable to an observable and return it
						return of(data);
					}


					public resetCount(): Observable<string> {
						// 1. Create a local variable with some data to return
						let data: string = '';

						// 2. Convert that variable to an observable and return it
						return of(data).pipe( delay(5000) )
					}


					public getCount(): Observable<number> {
						// 1. Create a local variable with some data to return
						let data: number = 27;

						// 2. Convert that variable to an observable and return it
						return of(data);
					}




    2. Change your page1 to get the count (using an observable)

		Page 1 needs to show the current count
		 a. So, it has to invoke the REST call to countService.getCount() 
		 b. When the REST comes back display that count


		a. Add a class variable to your page that is an observable that holds a number

		b. In ngOnInit() initialize the observable

		c. Use the async pipe to invoke the REST call



	3. Change your page1 so that pressing the buttons INVOKES those other REST calls

		



TypeScript Page 1 HTML

	<div class="bg-backDropColor m-2.5">
  <!-- Header Section -->
  <div class="bg-gray-200">
    <div class="flex flex-row justify-between items-center mb-4">
      <span class="text-2xl font-bold">TypeScript Page 1</span>

      <!-- Help Button -->
      <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Help
      </button>
    </div>
  </div>

  <!-- Reset Count Button -->
  <div class="grid grid-cols-3 gap-[20px] mt-8">
    <div class="flex place-content-center">
      <div>
        <button mat-raised-button (click)="this.resetCount()" [disabled]="resetInProgress" type="Reset Count" title="Reset Count" aria-label="Reset Count"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">

          <ng-container *ngIf="resetInProgress == false">
            Reset Count
          </ng-container>
          
          <ng-container *ngIf="resetInProgress == true">
            <i class="fa fa-spin fa-spinner"></i>
            In Progress...
          </ng-container>
        </button>
      </div>
    </div>

    <!-- Add to Count Button -->
    <div>
      <div class="flex place-content-center">
        <button mat-raised-button (click)="this.addToCount()" type="Add to Count" title="Add to Count" aria-label="Add to Count"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
          Add to Count
        </button>
      </div>
    </div>

    <!-- Go to Page 2 Hyperlink -->
    <div>
      <div class="flex place-content-center">
        <a href="#" [routerLink]="'/'+Constants.TYPESCRIPT_PAGE_2_ROUTE"
           class="text-blue-500 hover:text-blue-700 text-blue font-bold py-2 px-4 rounded underline">
          Go to Page 2
        </a>
      </div>
    </div>

    <!-- Current count label -->
    <ng-container *ngIf="(this.obsCurrentCount | async) as returnData">
      <div>
        <div class="flex place-content-center">
          <mat-label>Current Count is {{ returnData }} </mat-label>
        </div>
      </div>
    </ng-container>
  </div>
</div>

	
TypeScript Page 1 TS

import {Component, OnInit} from '@angular/core';
import { Constants } from '../utilities/constants';
import {Router} from "@angular/router";
import {CountService} from "../services/count.service";
import {Observable, subscribeOn} from "rxjs";

@Component({
  selector: 'app-typescript-page1',
  templateUrl: './typescript-page1.component.html',
  styleUrls: ['./typescript-page1.component.scss']
})
export class TypescriptPage1Component implements OnInit{
  protected readonly Constants = Constants;

  public obsCurrentCount: Observable<number>;
  public resetInProgress: boolean = false;

  constructor(private countService: CountService) {
  }


  ngOnInit(): void {
    this.obsCurrentCount = this.countService.getCount();

    }


  addToCount() {
    this.countService.addToCount().subscribe(()=>{
      // The Add REST call is finished
    // If you re-initialize the Observable, the async pipe will automatically invoke the REST call again
    this.obsCurrentCount = this.countService.getCount();
    });

  }

  resetCount(): void {

    this.resetInProgress = true;
    // Subscribe invokes the REST call to receive the info in the service
    this.countService.resetCount().subscribe(()=>{
      // The reset REST call is finished

    this.obsCurrentCount = this.countService.getCount();
    this.resetInProgress = false;
    });
  }

}


TypeScript Page 2 HTML	

<div class="bg-backDropColor m-2.5">
  <!-- Header Section -->
  <div class="bg-gray-200">
    <div class="flex flex-row justify-between items-center mb-4">
      <span class="text-2xl font-bold">TypeScript Page 2</span>

      <!-- Help Button -->
      <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Help
      </button>
    </div>
  </div>

  <!-- Reset Count Button -->
  <div class="grid grid-cols-3 gap-[20px] mt-8">
    <div class="flex place-content-center">
      <div>
        <button (click)="this.resetCount()" type="Reset Count" title="Reset Count" aria-label="Reset Count"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
          Reset Count
        </button>
      </div>
    </div>

    <!-- Add to Count Button -->
    <div>
      <div class="flex place-content-center">
        <button (click)="this.addToCount()" type="Add to Count" title="Add to Count" aria-label="Add to Count"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
          Add to Count
        </button>
      </div>
    </div>

    <!-- Go to Page 1 Hyperlink -->
    <div>
      <div class="flex place-content-center">
        <a href="#" [routerLink]="'/'+Constants.TYPESCRIPT_PAGE_1_ROUTE" class="text-blue-500 hover:text-blue-700 text-blue font-bold py-2 px-4 rounded underline">
          Go to Page 1
        </a>
      </div>
    </div>

    <!-- Current count label -->
    <ng-container *ngIf="(this.obsCurrentCount | async) as returnData">
    <div>
      <div class="flex place-content-center">
        <mat-label>Current Count is {{ returnData }}</mat-label>
      </div>
    </div>
    </ng-container>

  </div>

</div>

TypeScript Page 2 TS

import { Component } from '@angular/core';
import { Constants } from '../utilities/constants';
import {CountService} from "../services/count.service";
import {Observable} from "rxjs";

@Component({
  selector: 'app-typescript-page2',
  templateUrl: './typescript-page2.component.html',
  styleUrls: ['./typescript-page2.component.scss']
})
export class TypescriptPage2Component {
  protected readonly Constants = Constants;

  public obsCurrentCount: Observable<number>;

  constructor(private countService: CountService) {
  }


  ngOnInit(): void {
    this.obsCurrentCount = this.countService.getCount();

  }


  addToCount() {
    this.countService.addToCount().subscribe(()=>{
      // The Add REST call is finished
    });
    // If you re-initialize the Observable, the async pipe will automatically invoke the REST call again
    this.obsCurrentCount = this.countService.getCount();

  }

  resetCount(): void {
    // Subscribe invokes the REST call to receive the info in the service
    this.countService.resetCount().subscribe(()=>{
      // The reset REST call is finished
    });
    this.obsCurrentCount = this.countService.getCount();
  }

}


Count.Service TS

import { Injectable } from '@angular/core';
import {delay, Observable, of} from "rxjs";

@Injectable({
  providedIn: 'root'
})
export class CountService {

  public addToCount(): Observable<string> {
    let data: string = '';
    return of(data);
  }

  public resetCount(): Observable<string> {
    let data: string = '';
    return of(data).pipe(delay(5000));
  }

  public getCount(): Observable<number> {
    let data: number = 27;
    return of(data);
  }

}


						

