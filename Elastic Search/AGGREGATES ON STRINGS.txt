ElasticSearch Search Exercises 3 / Aggregate on Strings
-------------------------------------------------------
Problem:  I have a field that has a country name and want to get the count of each country
Solution: Use Aggregates on *KEYWORDS* fields



Boring Lecture 2
----------------
How do I do aggregates on text fields?

     POST /reports/_search
     {
          "query": {
              "match_all": {}
          },
          "size": 0, 
          "aggs": {
            "group_by_country": {               <-- Our aggregate name
              "terms": {                        <-- Term aggogate
                "field": "country"              <-- Field to do the counts on
              }
            }
          }
    }
    




Lesson 9 / Exercise 3 / How to do aggregates on country names
-------------------------------------------------------------
1. Setup a mapping with a country field


    # Destroy the mapping
    DELETE /exercise3



    # Create this mapping
    PUT /exercise3
    {
        "settings": {
            "refresh_interval": "1s"
          },

           "mappings": {
                 "dynamic": "strict",
                     "properties": {

                         "actors": {
                               "type": "text"
                           },

                          "description": {
                              "type": "text"
                           },

                          "priority": {
                          "type": "text",
                          "fields": {
                            "raw": {
                              "type": "keyword"
                            }
                          }
                        },

                          "country": {
                            "type": "text",
                            "fields": {
                              "raw": {
                                "type": "keyword"
                              }
                            }
                          }
                     }
                }
          }





    #  Populate the reports index with some data
    POST _bulk
    { "index": { "_index": "exercise3", "_id": 1 }}
    { "priority": "low", "actors": "John Smith", "description": "he really likes o'reilly", "country": "israel"}
    { "index": { "_index": "exercise3", "_id": 2 }}
    { "priority": "LOW", "actors": "george washington", "description": "depending on the kind query, you might want to go different ways with it",  "country": "ISRael"}
    { "index": { "_index": "exercise3", "_id": 3 }}
    { "priority": "high", "actors": "adam Smith", "country": "United States"}
    { "index": { "_index": "exercise3", "_id": 4 }}
    { "priority": "HIGH", "actors": "Adam Smith 2", "description": "This description is for record four", "country": "united states"}
    { "index": { "_index": "exercise3", "_id": 5 }}
    { "priority": "HIGH", "actors": ["Pat Benetar", "Michael Jackson", "George Michael"], "description": "There are too many singers from the 1980s listed here.  Get a life!!", "country": "united kingdom"}





 2. Run a search to give me the breakdown of country names and total records
    -- How many records match each country name?


    





  
 3. How do we order the results by count  (highest count at the top)...>?

 





 4. Run an aggregate query that shows the countries that make-up the 2 highest counts

    







 5. What countries make-up the 2 lowest counts?






 6. Run a regular search that sorts the results by priority



 




Lesson 9 / Exercise 4
---------------------
Using the data from Lesson 9, Exercise 1, answer these questions:
 
 1. Run an aggregate search that returns the total number of users by role  (for every role)


 2. Run an aggregate search that returns the total number of users by role for only GOV_USER and ADMINISTRATOR roles






 

